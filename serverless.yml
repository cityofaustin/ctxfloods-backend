service: ctxfloods-${env:CURRENT_FLOODS_BRANCH_NAME}

plugins:
  - serverless-content-encoding

custom:
  contentEncoding:
    minimumCompressionSize: 0
  PGENDPOINT:
    Fn::GetAtt:
      - pgDB
      - Endpoint.Address
  GRAPHQL_ENDPOINT:
    Fn::Join:
      - ''
      - - 'https://'
        - Ref: ApiGatewayRestApi
        - '.execute-api.'
        - ${self:provider.region}
        - .amazonaws.com/
        - ${self:provider.stage}
        - /graphql

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    BACKEND_PORT: ${env:BACKEND_PORT}
  region: us-east-1
  stage: ${env:AWS_STAGE}
  # profile: reportingtool

functions:
  graphql:
    handler: handlers/graphqlHandler.handle
    events:
      - http:
          method: post
          path: graphql
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "query" : "$util.escapeJavaScript($input.path('$.query'))",
                  "variables" : $input.json('$.variables'),
                  "operationName" : "$util.escapeJavaScript($input.path('$.operationName'))",
                  "headers" : {
                     #if( $input.params().header.get('Authorization').toString() != "" )
                        "authorization" : "$input.params().header.get('Authorization')"
                     #end
                  }
                }
              application/graphql: |
                {
                  "query" : "$util.escapeJavaScript($input.body)",
                  "headers" : {
                     #if( $input.params().header.get('Authorization').toString() != "" )
                        "authorization" : "$input.params().header.get('Authorization')"
                     #end
                  }
                }
      - http:
          method: get
          path: graphql
          integration: lambda
          cors: true
          request:
            parameters:
              querystrings:
                query: true
                variables: false
                operationName: false
              headers:
                Authorization: false
            template:
              application/json: |
                {
                  "query" : "$util.escapeJavaScript($input.params('query'))",
                  "variables" : "$util.escapeJavaScript($input.params('variables'))",
                  "operationName" : "$util.escapeJavaScript($input.params('operationName'))",
                  "headers" : {
                     #if( $input.params().header.get('Authorization').toString() != "" )
                        "authorization" : "$input.params().header.get('Authorization')"
                     #end
                  }
                }

    environment:
      PGENDPOINT: ${self:custom.PGENDPOINT}
      JWT_SECRET: ${env:JWT_SECRET}
  xml:
    handler: handlers/xmlHandler.handle
    events:
      - http:
          method: get
          path: xml

    environment:
      PGENDPOINT: ${self:custom.PGENDPOINT}
  waze_feed:
    handler: handlers/wazeFeedHandler.handle
    events:
      - http:
          method: get
          path: waze/feed

    environment:
      PGENDPOINT: ${self:custom.PGENDPOINT}
  incidentreport:
    handler: handlers/incidentReportHandler.handle
    events:
      - http:
          method: post
          path: incident/report
          cors: true
    environment:
      JWT_SECRET: ${env:JWT_SECRET}
      GRAPHQL_ENDPOINT: ${self:custom.GRAPHQL_ENDPOINT}
  emailreset:
    handler: handlers/resetEmailHandler.handle
    events:
      - http:
          method: post
          path: email/reset
          cors: true

    environment:
      PGENDPOINT: ${self:custom.PGENDPOINT}
      FRONTEND_URL: ${env:FRONTEND_URL}
      JWT_SECRET: ${env:JWT_SECRET}
      GMAIL_ADDRESS: ${env:GMAIL_ADDRESS}
      GMAIL_PASSWORD: ${env:GMAIL_PASSWORD}
  synclegacy:
    handler: handlers/syncLegacyHandler.handle
    events:
      - schedule:
          rate: rate(5 minutes)
    environment:
      GRAPHQL_ENDPOINT: ${self:custom.GRAPHQL_ENDPOINT}


# For a pgDB inside a VPC look e.g. here:
# http://www.stojanveselinovski.com/blog/2016/01/12/simple-postgresql-rds-cloudformation-template/
resources:
 Resources:
  pgSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acess to Postgre
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: 0.0.0.0/0

  pgDB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBName: "floods"
      AllocatedStorage: 5
      DBInstanceClass: "db.t2.micro"
      Engine: "postgres"
      EngineVersion: "9.5.4"
      MasterUsername: ${env:PGUSERNAME}
      MasterUserPassword: ${env:PGPASSWORD}
      VPCSecurityGroups:
      - Fn::GetAtt:
        - pgSecurityGroup
        - GroupId
      Tags:
        -
          Key: "Name"
          Value: "floods"
    DeletionPolicy: "Snapshot"

 Outputs:
    PgEndpoint:
      Description: "JDBC connection string for database"
      Value: ${self:custom.PGENDPOINT}
    GraphqlEndpoint:
      Description: "URL of /graphql Endpoint"
      Value: ${self:custom.GRAPHQL_ENDPOINT}
        # Fn::Join: [ "", [ 'https://', '.execute-api.']]

          # - ''
          # - - 'https://'
          #   - '.execute-api.'
            # - ${self:provider.region}
            # - .amazonaws.com/
            # - ${self:provider.stage}
            # - /graphql
        # { "Fn::Join" : [ "", [
        #   "https://",
        #   {"Ref": "ApiGatewayRestApi" },
        #   ".execute-api.",
        #   ${self:provider.region},
        #   ".amazonaws.com/",
        #   ${self:provider.stage},
        #   "/graphql"
        # ]]}
